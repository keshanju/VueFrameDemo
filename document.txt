
###	框架Demo演示，要点罗列

##	1.	介绍
        a. 背景(SPA单页的瓶颈=>首屏加载慢；不同项目的会有不同选型=>官网、会员中心、后台系统等等；TS搭配后台，实现前端代码的系统化)
        b. 优势(配置项目变得更加灵活；代码质量提高；不同页面加载速度不会互相影响；一旦底层逻辑封装完毕，后期维护更容易)
        c. 劣势(type以及model的定义，写代码速度变慢；代码逻辑的封装需要团队成员意识保持高度一致，比较难的一个点；)

##	2.	应用到的技术点(相信大家都是很熟悉的，都用过)
        a. vue-cli 3.x、typescript、element-ui(核心)
        b. vue-router、vuex 路由管理和状态管理库(可选)
        c. vue-il18n多语言(高端)
        d. 前端请求api的axios.js(基石)
        e. ts类型系统，interface、enum、class、extends、proxy、decorator等等(利刃)

##	3.	如何用？
        a. 新建的页面需要遵照对应的html和对应的ts文件保持一样的命名，webpack打包时会识别这些对应文件，并配置成一个个页面入口；
        b. 单个项目根目录下需要有public文件夹，主要是放置一些静态文件和外链资源；
        c. 对于路由、状态管理库、多语言的配置、UI包的使用，参见test.html界面；
        d. 对于api的请求，将接口的请求与页面的逻辑分开，BaseApi、CommonApi、XxxApi；请求参数和返回数据定义model，
           确保请求参数、返回数据与后端api保持一致，这样利于管理和定义问题，也可以在开发阶段就避免低级错误
        e. 谈完多页，再谈谈单页。举例：用户中心可设置为单页，各模块可以通过组件系统集成在 user.html 中，
           实现在用户中心按需加载独立的模块的功能；
        f. 各模块在写业务逻辑的时，可以通过代理和继承的方式将api请求和界面逻辑进行良好的解耦，提高代码的可读性；
        g. 在pages下新建多个项目（web端，H5端，国内站，国外站，精简版，微信公众号等），如果这些项目间的多数逻辑都是类似的(比如接口用的是同一套)，那么就可以实现公用一套逻辑，
           项目特殊的地方可通过在当前项目根目录下新建配置文件，实现区别化
